.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "RPN 1"
.TH RPN 1 2025-06-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
rpn \- Text\-mode RPN calculator
.SH SYNOPSIS
.IX Header "SYNOPSIS"
rpn [options]
.PP
.Vb 3
\& Options:
\&    \-help|\-help1|\-help2  Show short|medium|long usage message
\&    \-man                 Show man page (invokes pager)
\&
\&    \-[no]readline Use Perl::ReadLine for input (default if available)
\&    \-debugging    Debugging (developer option)
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBrpn\fR (formerly called \fBcalc\fR) is a text-mode RPN calculator
.PP
Operands and commands may be entered as text or as command-line
arguments.  Multiple command may be entered on a line.  Unrecognized
command-line options are treated as ordinary arguments, allowing for
uses like "\f(CW\*(C`rpn \-2 \-\- 4 + .\*(C'\fR".
.SH OPTIONS
.IX Header "OPTIONS"
.IP "\fB\-help\fR, \fB\-help1\fR, \fB\-help2\fR" 4
.IX Item "-help, -help1, -help2"
Show short, medium, or long usage message
.IP \fB\-man\fR 4
.IX Item "-man"
Show man page using \fBperldoc\fR, invokes pager
.IP \fB\-[no]readline\fR 4
.IX Item "-[no]readline"
Use \f(CW\*(C`Perl::ReadLine\*(C'\fR for input (enabled by default if available)
.IP \fB\-hexadecimal\fR 4
.IX Item "-hexadecimal"
Use hexadecimal mode.  Hexadecimal input still requires "0x"
prefix, but output shows hexadecimal integers.  See also \fBhexmode\fR
and \fBdecmode\fR commands.  Can be abbreviated to \fB\-hex\fR.
.IP \fB\-debugging\fR 4
.IX Item "-debugging"
Enable debugging (developer option)
.SH "COMMANDS AND OPERANDS"
.IX Header "COMMANDS AND OPERANDS"
.IP "\fB?, help\fR" 4
.IX Item "?, help"
Show help message
.IP \fBman\fR 4
.IX Item "man"
Show man page (like \f(CW\*(C`rpn \-man\*(C'\fR)
.IP \fBnumber\fR 4
.IX Item "number"
Push a number onto the stack
.Sp
The number may be integer (decimal or hexadecimal) or floating-point.
.IP \fBnum:num:...\fR 4
.IX Item "num:num:..."
Push a number in HH:MM:SS format (base 60); '.' can be used for
fractional values.
.IP \fBI:number\fR 4
.IX Item "I:number"
Push a BigInt on the stack
.IP \fBB:number\fR 4
.IX Item "B:number"
Push a BigFloat on the stack
.IP \fB<num>_<unit>\fR 4
.IX Item "<num>_<unit>"
<num> * <unit>, where <unit> can be any variable name
.Sp
Anything not recognized as a number or command is pushed onto the
stack as a string.
.IP "\fB+, \-, *, /, %, **\fR" 4
.IX Item "+, -, *, /, %, **"
Arithmetic operators
.IP \fB//\fR 4
.IX Item "//"
Integer division
.IP \fB\-\-\fR 4
.IX Item "--"
Negate
.IP \fB1/\fR 4
.IX Item "1/"
Reciprocal
.IP \fB%%\fR 4
.IX Item "%%"
Push quotient and remainder
.IP "\fB& | ^ ~ << >>\fR" 4
.IX Item "& | ^ ~ << >>"
Bitwise operators
.IP \fBsumn\fR 4
.IX Item "sumn"
Sum of top \fBTOS\fR stack elements
.Sp
For example "\fB10 20 30 3 sumn\fR" yields \fB30\fR
.IP \fBdup\fR 4
.IX Item "dup"
Duplicate TOS (top of stack)
.IP \fBdrop\fR 4
.IX Item "drop"
Drop TOS
.IP \fBdropn\fR 4
.IX Item "dropn"
Drop \fBTOS+1\fR items from stack
.IP \fBpick\fR 4
.IX Item "pick"
Nth stack element; "\fB1 pick\fR" is equivalent to "\fBdup\fR"
.IP \fBdepth\fR 4
.IX Item "depth"
Push stack depth
.IP \fBclear\fR 4
.IX Item "clear"
Clear stack; equivalent to \fBdepth dropn\fR
.IP \fBswap\fR 4
.IX Item "swap"
Swap top two stack elements
.IP "\fBsin, cos, tan, asin, acos, atan\fR" 4
.IX Item "sin, cos, tan, asin, acos, atan"
Trigonometric functions (in radians)
.IP \fBatan2\fR 4
.IX Item "atan2"
\&\fBatan(y/x)\fR
.IP \fBdeg\fR 4
.IX Item "deg"
Convert degrees to radians
.IP \fBrad\fR 4
.IX Item "rad"
Convert radians to degrees
.IP \fBexp\fR 4
.IX Item "exp"
\&\fBe**x\fR
.IP "\fBln, loge\fR" 4
.IX Item "ln, loge"
log base \fBe\fR
.IP "\fBlog, log10\fR" 4
.IX Item "log, log10"
log base 10
.IP "\fBlg, log2\fR" 4
.IX Item "lg, log2"
log base 2
.IP \fBint\fR 4
.IX Item "int"
Integer part (truncate towards 0)
.IP \fBfrac\fR 4
.IX Item "frac"
Fractional part
.IP \fBsrand\fR 4
.IX Item "srand"
Set arbitrary random seed
.IP \fBsrandx\fR 4
.IX Item "srandx"
Set random seed to specified value
.IP \fBrand\fR 4
.IX Item "rand"
Random number between 0.0 and 1.0 (0.0 <= result < 1.0)
.Sp
Implicitly calls \fBsrand\fR before first use if it hasn't been called
explicitly.
.IP \fBsqrt\fR 4
.IX Item "sqrt"
Square root
.IP \fBhhmm\fR 4
.IX Item "hhmm"
Current time in minutes since midnight
.Sp
\&\fBhhmm hms\fR shows the time in human-readable form
.IP \fBtoday\fR 4
.IX Item "today"
Current date in days (1970\-01\-01 is day 0)
.IP \fBymd\fR 4
.IX Item "ymd"
Display TOS, a day number, in YYYY-MM-DD format
.IP \fBvars\fR 4
.IX Item "vars"
Show all variables
.IP \fB<name>=\fR 4
.IX Item "<name>="
Assign variable
.Sp
For example "\fB42 answer=\fR" assigns the value \fB42\fR to the variable \fBanswer\fR
.IP \fBofmt=\fR 4
.IX Item "ofmt="
Show output format (default is \f(CW"%.16g"\fR)
.IP \fBofmt=<fmt>\fR 4
.IX Item "ofmt=<fmt>"
Set output format
.IP "\fB.\fR (dot)" 4
.IX Item ". (dot)"
Display TOS (top of stack)
.IP \fBhex\fR 4
.IX Item "hex"
Display TOS in hexadecimal
.IP \fBoctal\fR 4
.IX Item "octal"
Display TOS in octal
.IP \fBhms\fR 4
.IX Item "hms"
Display TOS in HH:MM:SS format (base 60) (currently limited to integers)
.IP \fBhexmode\fR 4
.IX Item "hexmode"
Enter hexadecimal mode.  Numbers are shown as hexadecimal integers.
"0x" prefix is still required for hexadecimal input.
.IP \fBdecmode\fR 4
.IX Item "decmode"
Enter decimal mode (the default)
.IP \fBcomma\fR 4
.IX Item "comma"
Display TOS with commas, e.g., \f(CW"12,345,678.901234"\fR
.IP "\fB,\fR (comma character)" 4
.IX Item ", (comma character)"
Dump stack
.IP \fBHex\fR 4
.IX Item "Hex"
Dump stack in hexadecimal
.IP \fBOctal\fR 4
.IX Item "Octal"
Dump stack in octal
.IP \fBHMS\fR 4
.IX Item "HMS"
Dump stack in HH:MM:SS format (base 60)
.IP \fBComma\fR 4
.IX Item "Comma"
Dump stack with commas
.IP \fB\e\fR 4
.IX Item ""
Inhibit stack dump
.IP "\fB: ...\fR" 4
.IX Item ": ..."
Evaluate Perl expression (one line only)
.IP \fB(...)\fR 4
.IX Item "(...)"
Evaluate Perl expression (no whitespace)
.IP "\fB{ ... }\fR" 4
.IX Item "{ ... }"
Evaluate Perl expression
.SH "PREDEFINED VARIABLES"
.IX Header "PREDEFINED VARIABLES"
.IP \fBpi\fR 4
.IX Item "pi"
3.141592653589793
.IP \fBe\fR 4
.IX Item "e"
2.718281828459045 (Euler's constant)
.IP \fBphi\fR 4
.IX Item "phi"
1.618033988749895 (golden ratio)
.IP "\fBk\fR, \fBM\fR, \fBG\fR, \fBT\fR, \fBP\fR, \fBE\fR, \fBZ\fR, \fBY\fR, \fBR\fR, \fBQ\fR" 4
.IX Item "k, M, G, T, P, E, Z, Y, R, Q"
Metric prefixes (decimal), 1000, 1000000, ...
.IP "\fBm\fR, \fBmu\fR, \fBn\fR, \fBp\fR, \fBf\fR, \fBa\fR, \fBz\fR, \fBy\fR, \fBr\fR, \fBq\fR" 4
.IX Item "m, mu, n, p, f, a, z, y, r, q"
Metric prefixes (decimal), 10^\-3, 10^\-6, ...
.Sp
milli, micro, nano, pico, femto, atto, zepto, yocto, ronto, quecto
.IP "\fBki\fR, \fBMi\fR, \fBGi\fR, \fBTi\fR, \fBPi\fR, \fBEi\fR, \fBZi\fR, \fBYi\fR, \fBRi\fR, \fBQi\fR" 4
.IX Item "ki, Mi, Gi, Ti, Pi, Ei, Zi, Yi, Ri, Qi"
Metric prefixes (binary), 1024, 1048576, ...
.Sp
kibi, mebi, gibi, tebi, pebi, exbi, zebi, yobi, robi(?), quebi(?)
.IP \fBhundred\fR 4
.IX Item "hundred"
100
.IP "\fBthousand\fR, \fBmillion\fR, \fBbillion\fR, \fBtrillion\fR, \fBquadrillion\fR, \fBquintillion\fR, \fBsextillion\fR, \fBseptillion\fR, \fBoctillion\fR, \fBnonillion\fR, \fBdecillion\fR, \fBundecillion\fR, \fBduodecillion\fR, \fBtredecillion\fR, \fBquattuordecillion\fR, \fBquindecillion\fR, \fBsexdecillion\fR, \fBseptendecillion\fR, \fBoctodecillion\fR, \fBnovemdecillion\fR, \fBvigintillion\fR" 4
.IX Item "thousand, million, billion, trillion, quadrillion, quintillion, sextillion, septillion, octillion, nonillion, decillion, undecillion, duodecillion, tredecillion, quattuordecillion, quindecillion, sexdecillion, septendecillion, octodecillion, novemdecillion, vigintillion"
Powers of 1000
.SH SOURCE
.IX Header "SOURCE"
<https://github.com/Keith\-S\-Thompson/rpn>
.SH AUTHOR
.IX Header "AUTHOR"
Keith Thompson <Keith.S.Thompson@gmail.com>
